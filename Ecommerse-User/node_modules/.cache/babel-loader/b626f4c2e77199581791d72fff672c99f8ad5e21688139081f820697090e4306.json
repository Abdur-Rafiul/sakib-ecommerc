{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CurlSslOpt = void 0;\n/**\r\n * Copyright (c) Jonathan Cardoso Machado. All Rights Reserved.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\n// https://github.com/curl/curl/blob/e1be8254534898fccafc5d6cd04f6235f283cfbd/include/curl/curl.h#L7\n/**\r\n * Object with constants for option `SSL_OPTIONS` and/or `PROXY_SSL_OPTIONS`\r\n *\r\n * `CURLSSLOPT_ALLOW_BEAST` becomes `CurlSslOpt.AllowBeast`\r\n *\r\n * @public\r\n */\nvar CurlSslOpt;\n(function (CurlSslOpt) {\n  /**\r\n   * Tells libcurl to allow the BEAST SSL vulnerability in the\r\n   * name of improving interoperability with older servers. Some SSL libraries\r\n   * have introduced work-arounds for this flaw but those work-arounds sometimes\r\n   * make the SSL communication fail. To regain functionality with those broken\r\n   * servers, a user can this way allow the vulnerability back.\r\n   */\n  CurlSslOpt[CurlSslOpt[\"AllowBeast\"] = 1] = \"AllowBeast\";\n  /**\r\n   * Tells libcurl to disable certificate revocation checks for those\r\n   * SSL backends where such behavior is present.\r\n   */\n  CurlSslOpt[CurlSslOpt[\"NoRevoke\"] = 2] = \"NoRevoke\";\n  /**\r\n   * Tells libcurl to *NOT* accept a partial certificate chain\r\n   * if possible. The OpenSSL backend has this ability.\r\n   */\n  CurlSslOpt[CurlSslOpt[\"NoPartialChain\"] = 4] = \"NoPartialChain\";\n  /**\r\n   * Tells libcurl to ignore certificate revocation offline\r\n   * checks and ignore missing revocation list for those SSL backends where such\r\n   * behavior is present.\r\n   */\n  CurlSslOpt[CurlSslOpt[\"RevokeBestEffort\"] = 8] = \"RevokeBestEffort\";\n  /**\r\n   * Tells libcurl to use standard certificate store of\r\n   * operating system. Currently implemented under MS-Windows.\r\n   */\n  CurlSslOpt[CurlSslOpt[\"NativeCa\"] = 16] = \"NativeCa\";\n  /**\r\n   * Tells libcurl to automatically locate and use\r\n   * a client certificate for authentication. (Schannel)\r\n   *\r\n   * Added with libcurl 7.77 - This was the default in previous versions\r\n   */\n  CurlSslOpt[CurlSslOpt[\"AutoClientCert\"] = 32] = \"AutoClientCert\";\n})(CurlSslOpt = exports.CurlSslOpt || (exports.CurlSslOpt = {}));","map":{"version":3,"names":["CurlSslOpt","exports"],"sources":["D:\\Rabbil Laravel\\Ecommerce-Project\\Ecommerse-User\\node_modules\\node-libcurl\\lib\\enum\\CurlSslOpt.ts"],"sourcesContent":["/**\n * Copyright (c) Jonathan Cardoso Machado. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// https://github.com/curl/curl/blob/e1be8254534898fccafc5d6cd04f6235f283cfbd/include/curl/curl.h#L7\n/**\n * Object with constants for option `SSL_OPTIONS` and/or `PROXY_SSL_OPTIONS`\n *\n * `CURLSSLOPT_ALLOW_BEAST` becomes `CurlSslOpt.AllowBeast`\n *\n * @public\n */\nexport enum CurlSslOpt {\n  /**\n   * Tells libcurl to allow the BEAST SSL vulnerability in the\n   * name of improving interoperability with older servers. Some SSL libraries\n   * have introduced work-arounds for this flaw but those work-arounds sometimes\n   * make the SSL communication fail. To regain functionality with those broken\n   * servers, a user can this way allow the vulnerability back.\n   */\n  AllowBeast = 1 << 0,\n  /**\n   * Tells libcurl to disable certificate revocation checks for those\n   * SSL backends where such behavior is present.\n   */\n  NoRevoke = 1 << 1,\n\n  /**\n   * Tells libcurl to *NOT* accept a partial certificate chain\n   * if possible. The OpenSSL backend has this ability.\n   */\n  NoPartialChain = 1 << 2,\n\n  /**\n   * Tells libcurl to ignore certificate revocation offline\n   * checks and ignore missing revocation list for those SSL backends where such\n   * behavior is present.\n   */\n  RevokeBestEffort = 1 << 3,\n\n  /**\n   * Tells libcurl to use standard certificate store of\n   * operating system. Currently implemented under MS-Windows.\n   */\n  NativeCa = 1 << 4,\n\n  /**\n   * Tells libcurl to automatically locate and use\n   * a client certificate for authentication. (Schannel)\n   *\n   * Added with libcurl 7.77 - This was the default in previous versions\n   */\n  AutoClientCert = 1 << 5,\n}\n"],"mappings":";;;;;;AAAA;;;;;;AAMA;AACA;;;;;;;AAOA,IAAYA,UAyCX;AAzCD,WAAYA,UAAU;EACpB;;;;;;;EAOAA,UAAA,CAAAA,UAAA,kCAAmB;EACnB;;;;EAIAA,UAAA,CAAAA,UAAA,8BAAiB;EAEjB;;;;EAIAA,UAAA,CAAAA,UAAA,0CAAuB;EAEvB;;;;;EAKAA,UAAA,CAAAA,UAAA,8CAAyB;EAEzB;;;;EAIAA,UAAA,CAAAA,UAAA,+BAAiB;EAEjB;;;;;;EAMAA,UAAA,CAAAA,UAAA,2CAAuB;AACzB,CAAC,EAzCWA,UAAU,GAAVC,OAAA,CAAAD,UAAU,KAAVC,OAAA,CAAAD,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}