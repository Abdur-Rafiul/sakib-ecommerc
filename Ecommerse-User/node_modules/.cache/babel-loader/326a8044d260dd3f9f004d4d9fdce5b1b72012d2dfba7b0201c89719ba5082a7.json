{"ast":null,"code":"\"use strict\";\n\n/**\r\n * Copyright (c) Jonathan Cardoso Machado. All Rights Reserved.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CurlFeature = void 0;\n/**\r\n * Flags to be used with {@link \"Curl\".Curl.enable | `Curl#enable`} and {@link \"Curl\".Curl.disable | `Curl#disable`}\r\n * @public\r\n */\nvar CurlFeature;\n(function (CurlFeature) {\n  /**\r\n   * Data received is passed as a Buffer to the end event.\r\n   */\n  CurlFeature[CurlFeature[\"NoDataParsing\"] = 1] = \"NoDataParsing\";\n  /**\r\n   * Header received is not parsed, it's passed as a Buffer to the end event.\r\n   */\n  CurlFeature[CurlFeature[\"NoHeaderParsing\"] = 2] = \"NoHeaderParsing\";\n  /**\r\n   * Same than `NoDataParsing | NoHeaderParsing`\r\n   */\n  CurlFeature[CurlFeature[\"Raw\"] = 3] = \"Raw\";\n  /**\r\n   * Data received is not stored inside this handle, implies `NoDataParsing`.\r\n   */\n  CurlFeature[CurlFeature[\"NoDataStorage\"] = 4] = \"NoDataStorage\";\n  /**\r\n   * Header received is not stored inside this handle, implies `NoHeaderParsing`.\r\n   */\n  CurlFeature[CurlFeature[\"NoHeaderStorage\"] = 8] = \"NoHeaderStorage\";\n  /**\r\n   * Same than `NoDataStorage | NoHeaderStorage`, implies `Raw`.\r\n   */\n  CurlFeature[CurlFeature[\"NoStorage\"] = 12] = \"NoStorage\";\n  /**\r\n   * This will change the behavior of the internal `WRITEFUNCTION` to push data into a stream instead of\r\n   * buffering all the data into multiple `Buffer` chunks.\r\n   *\r\n   * As soon as the stream is available, it will be passed as the first argument for the `stream` event.\r\n   *\r\n   * Example usage:\r\n   *\r\n   * ```typescript\r\n   *  const curl = new Curl()\r\n   *  curl.setOpt('URL', 'https://some-domain/upload')\r\n   *\r\n   *  curl.setStreamProgressCallback(() => {\r\n   *    // this will use the default progress callback from libcurl\r\n   *    return CurlProgressFunc.Continue\r\n   *  })\r\n   *\r\n   *  curl.on('end', (statusCode, data) => {\r\n   *    console.log('\\n'.repeat(5))\r\n   *    console.log(\r\n   *      `curl - end - status: ${statusCode} - data length: ${data.length}`,\r\n   *    )\r\n   *    curl.close()\r\n   *  })\r\n   *  curl.on('error', (error, errorCode) => {\r\n   *    console.log('\\n'.repeat(5))\r\n   *    console.error('curl - error: ', error, errorCode)\r\n   *    curl.close()\r\n   *  })\r\n   *  curl.on('stream', async (stream, _statusCode, _headers) => {\r\n   *    const writableStream = fs.createWriteStream('./test.out')\r\n   *    stream.pipe(writableStream)\r\n   *  })\r\n   *  curl.perform()\r\n   * ```\r\n   *\r\n   * Using this implies `NoDataStorage`.\r\n   *\r\n   * To control the `highWaterMark` option of the response stream, see {@link \"Curl\".Curl.setStreamResponseHighWaterMark | `Curl#setStreamResponseHighWaterMark`}\r\n   *\r\n   * @remarks\r\n   *\r\n   * Make sure your libcurl version is greater than or equal 7.69.1.\r\n   * Versions older than that one are not reliable for streams usage.\r\n   */\n  CurlFeature[CurlFeature[\"StreamResponse\"] = 16] = \"StreamResponse\";\n})(CurlFeature = exports.CurlFeature || (exports.CurlFeature = {}));","map":{"version":3,"names":["CurlFeature","exports"],"sources":["D:\\Rabbil Laravel\\Ecommerce-Project\\Ecommerse-User\\node_modules\\node-libcurl\\lib\\enum\\CurlFeature.ts"],"sourcesContent":["/**\n * Copyright (c) Jonathan Cardoso Machado. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Flags to be used with {@link \"Curl\".Curl.enable | `Curl#enable`} and {@link \"Curl\".Curl.disable | `Curl#disable`}\n * @public\n */\nexport enum CurlFeature {\n  /**\n   * Data received is passed as a Buffer to the end event.\n   */\n  NoDataParsing = 1 << 0,\n\n  /**\n   * Header received is not parsed, it's passed as a Buffer to the end event.\n   */\n  NoHeaderParsing = 1 << 1,\n\n  /**\n   * Same than `NoDataParsing | NoHeaderParsing`\n   */\n  Raw = NoDataParsing | NoHeaderParsing,\n\n  /**\n   * Data received is not stored inside this handle, implies `NoDataParsing`.\n   */\n  NoDataStorage = 1 << 2,\n\n  /**\n   * Header received is not stored inside this handle, implies `NoHeaderParsing`.\n   */\n  NoHeaderStorage = 1 << 3,\n\n  /**\n   * Same than `NoDataStorage | NoHeaderStorage`, implies `Raw`.\n   */\n  NoStorage = NoDataStorage | NoHeaderStorage,\n\n  /**\n   * This will change the behavior of the internal `WRITEFUNCTION` to push data into a stream instead of\n   * buffering all the data into multiple `Buffer` chunks.\n   *\n   * As soon as the stream is available, it will be passed as the first argument for the `stream` event.\n   *\n   * Example usage:\n   *\n   * ```typescript\n   *  const curl = new Curl()\n   *  curl.setOpt('URL', 'https://some-domain/upload')\n   *\n   *  curl.setStreamProgressCallback(() => {\n   *    // this will use the default progress callback from libcurl\n   *    return CurlProgressFunc.Continue\n   *  })\n   *\n   *  curl.on('end', (statusCode, data) => {\n   *    console.log('\\n'.repeat(5))\n   *    console.log(\n   *      `curl - end - status: ${statusCode} - data length: ${data.length}`,\n   *    )\n   *    curl.close()\n   *  })\n   *  curl.on('error', (error, errorCode) => {\n   *    console.log('\\n'.repeat(5))\n   *    console.error('curl - error: ', error, errorCode)\n   *    curl.close()\n   *  })\n   *  curl.on('stream', async (stream, _statusCode, _headers) => {\n   *    const writableStream = fs.createWriteStream('./test.out')\n   *    stream.pipe(writableStream)\n   *  })\n   *  curl.perform()\n   * ```\n   *\n   * Using this implies `NoDataStorage`.\n   *\n   * To control the `highWaterMark` option of the response stream, see {@link \"Curl\".Curl.setStreamResponseHighWaterMark | `Curl#setStreamResponseHighWaterMark`}\n   *\n   * @remarks\n   *\n   * Make sure your libcurl version is greater than or equal 7.69.1.\n   * Versions older than that one are not reliable for streams usage.\n   */\n  StreamResponse = 1 << 4,\n}\n"],"mappings":";;AAAA;;;;;;;;;;AAOA;;;;AAIA,IAAYA,WA6EX;AA7ED,WAAYA,WAAW;EACrB;;;EAGAA,WAAA,CAAAA,WAAA,wCAAsB;EAEtB;;;EAGAA,WAAA,CAAAA,WAAA,4CAAwB;EAExB;;;EAGAA,WAAA,CAAAA,WAAA,oBAAqC;EAErC;;;EAGAA,WAAA,CAAAA,WAAA,wCAAsB;EAEtB;;;EAGAA,WAAA,CAAAA,WAAA,4CAAwB;EAExB;;;EAGAA,WAAA,CAAAA,WAAA,iCAA2C;EAE3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6CAA,WAAA,CAAAA,WAAA,2CAAuB;AACzB,CAAC,EA7EWA,WAAW,GAAXC,OAAA,CAAAD,WAAW,KAAXC,OAAA,CAAAD,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}