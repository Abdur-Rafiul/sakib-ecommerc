{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseHeaders = void 0;\n/**\r\n * Parses the headers that were stored while\r\n *  the request was being processed.\r\n *\r\n * @internal\r\n */\nfunction parseHeaders(headersString) {\n  const headers = headersString.split(/\\r?\\n|\\r/g);\n  const len = headers.length;\n  const result = [];\n  let isStatusLine = true;\n  let currHeaders = {};\n  for (let i = 0; i < len; i += 1) {\n    // status line\n    if (isStatusLine) {\n      const header = headers[i].split(' ');\n      currHeaders.result = {\n        version: header.shift() || '',\n        code: parseInt(header.shift() || '0', 10),\n        reason: header.join(' ')\n      };\n      isStatusLine = false;\n      continue;\n    }\n    // Empty string means empty line, which means another header group\n    if (headers[i] === '') {\n      result.push(currHeaders);\n      currHeaders = {};\n      isStatusLine = true;\n      continue;\n    }\n    const header = headers[i].split(/:\\s(.+)/);\n    if (header[0].toUpperCase() === 'SET-COOKIE') {\n      if (!currHeaders['Set-Cookie']) {\n        currHeaders['Set-Cookie'] = [];\n      }\n      currHeaders['Set-Cookie'].push(header[1]);\n    } else {\n      currHeaders[header[0]] = header[1];\n    }\n  }\n  return result;\n}\nexports.parseHeaders = parseHeaders;","map":{"version":3,"names":["parseHeaders","headersString","headers","split","len","length","result","isStatusLine","currHeaders","i","header","version","shift","code","parseInt","reason","join","push","toUpperCase","exports"],"sources":["D:\\Rabbil Laravel\\Ecommerce-Project\\Ecommerse-User\\node_modules\\node-libcurl\\lib\\parseHeaders.ts"],"sourcesContent":["/**\n * Copyright (c) Jonathan Cardoso Machado. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/**\n * Whe data parsing is enabled on the {@link \"Curl\".Curl} instance, the headers parameter passed\n *  to the `end` event's callback will be one array of this type.\n * @public\n */\nexport type HeaderInfo = {\n  result?: {\n    version: string\n    code: number\n    reason: string\n  }\n} & {\n  'Set-Cookie'?: string[]\n} & { [headerKey: string]: string }\n\n/**\n * Parses the headers that were stored while\n *  the request was being processed.\n *\n * @internal\n */\nexport function parseHeaders(headersString: string): HeaderInfo[] {\n  const headers = headersString.split(/\\r?\\n|\\r/g)\n  const len = headers.length\n  const result = []\n\n  let isStatusLine = true\n  let currHeaders: HeaderInfo = {}\n\n  for (let i = 0; i < len; i += 1) {\n    // status line\n    if (isStatusLine) {\n      const header = headers[i].split(' ')\n\n      currHeaders.result = {\n        version: header.shift() || '',\n        code: parseInt(header.shift() || '0', 10),\n        reason: header.join(' '),\n      }\n\n      isStatusLine = false\n\n      continue\n    }\n\n    // Empty string means empty line, which means another header group\n    if (headers[i] === '') {\n      result.push(currHeaders)\n      currHeaders = {}\n\n      isStatusLine = true\n\n      continue\n    }\n\n    const header = headers[i].split(/:\\s(.+)/)\n    if (header[0].toUpperCase() === 'SET-COOKIE') {\n      if (!currHeaders['Set-Cookie']) {\n        currHeaders['Set-Cookie'] = []\n      }\n\n      currHeaders['Set-Cookie'].push(header[1])\n    } else {\n      currHeaders[header[0]] = header[1]\n    }\n  }\n\n  return result\n}\n"],"mappings":";;;;;;AAqBA;;;;;;AAMA,SAAgBA,YAAYA,CAACC,aAAqB;EAChD,MAAMC,OAAO,GAAGD,aAAa,CAACE,KAAK,CAAC,WAAW,CAAC;EAChD,MAAMC,GAAG,GAAGF,OAAO,CAACG,MAAM;EAC1B,MAAMC,MAAM,GAAG,EAAE;EAEjB,IAAIC,YAAY,GAAG,IAAI;EACvB,IAAIC,WAAW,GAAe,EAAE;EAEhC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,GAAG,EAAEK,CAAC,IAAI,CAAC,EAAE;IAC/B;IACA,IAAIF,YAAY,EAAE;MAChB,MAAMG,MAAM,GAAGR,OAAO,CAACO,CAAC,CAAC,CAACN,KAAK,CAAC,GAAG,CAAC;MAEpCK,WAAW,CAACF,MAAM,GAAG;QACnBK,OAAO,EAAED,MAAM,CAACE,KAAK,EAAE,IAAI,EAAE;QAC7BC,IAAI,EAAEC,QAAQ,CAACJ,MAAM,CAACE,KAAK,EAAE,IAAI,GAAG,EAAE,EAAE,CAAC;QACzCG,MAAM,EAAEL,MAAM,CAACM,IAAI,CAAC,GAAG;OACxB;MAEDT,YAAY,GAAG,KAAK;MAEpB;;IAGF;IACA,IAAIL,OAAO,CAACO,CAAC,CAAC,KAAK,EAAE,EAAE;MACrBH,MAAM,CAACW,IAAI,CAACT,WAAW,CAAC;MACxBA,WAAW,GAAG,EAAE;MAEhBD,YAAY,GAAG,IAAI;MAEnB;;IAGF,MAAMG,MAAM,GAAGR,OAAO,CAACO,CAAC,CAAC,CAACN,KAAK,CAAC,SAAS,CAAC;IAC1C,IAAIO,MAAM,CAAC,CAAC,CAAC,CAACQ,WAAW,EAAE,KAAK,YAAY,EAAE;MAC5C,IAAI,CAACV,WAAW,CAAC,YAAY,CAAC,EAAE;QAC9BA,WAAW,CAAC,YAAY,CAAC,GAAG,EAAE;;MAGhCA,WAAW,CAAC,YAAY,CAAC,CAACS,IAAI,CAACP,MAAM,CAAC,CAAC,CAAC,CAAC;KAC1C,MAAM;MACLF,WAAW,CAACE,MAAM,CAAC,CAAC,CAAC,CAAC,GAAGA,MAAM,CAAC,CAAC,CAAC;;;EAItC,OAAOJ,MAAM;AACf;AA/CAa,OAAA,CAAAnB,YAAA,GAAAA,YAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}