export declare const useSafeSetState: () => (fn: AnyFunction) => void;
declare type AnyAsyncFunction = (...args: any[]) => Promise<any>;
declare type UseAsyncParams<AsyncFN extends AnyAsyncFunction> = {
    fn: AsyncFN;
    runAtStart?: boolean;
};
declare type AnyFunction = () => void;
declare type UseAsyncReturnType<AsyncFN extends AnyAsyncFunction> = {
    loading: boolean;
    value: Awaited<ReturnType<AsyncFN>> | null;
    error: Error | null;
    callAgain: (...params: Parameters<AsyncFN>) => void;
};
export declare const useAsync: <AsyncFn extends AnyAsyncFunction>(args: UseAsyncParams<AsyncFn>, ...params: Parameters<AsyncFn>) => UseAsyncReturnType<AsyncFn>;
export {};
