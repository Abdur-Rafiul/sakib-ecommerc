"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAsync = exports.useSafeSetState = void 0;
const react_1 = require("react");
const useSafeSetState = () => {
    const isMounted = (0, react_1.useRef)(false);
    (0, react_1.useEffect)(() => {
        isMounted.current = true;
        return () => {
            isMounted.current = false;
        };
    }, []);
    return (0, react_1.useCallback)((fn) => {
        if (isMounted.current) {
            fn();
        }
    }, []);
};
exports.useSafeSetState = useSafeSetState;
const useAsync = (args, ...params) => {
    const { fn, runAtStart = true } = args;
    const setStateSafe = (0, exports.useSafeSetState)();
    const [loading, setLoading] = (0, react_1.useState)(runAtStart);
    const [value, setValue] = (0, react_1.useState)(null);
    const [error, setError] = (0, react_1.useState)(null);
    const runFn = (0, react_1.useCallback)((...newParams) => __awaiter(void 0, void 0, void 0, function* () {
        const paramsToSpread = newParams.length ? newParams : params;
        try {
            setStateSafe(() => {
                setLoading(true);
            });
            const result = yield fn(...paramsToSpread);
            setStateSafe(() => {
                setValue(result);
            });
        }
        catch (error) {
            setStateSafe(() => {
                setError(error);
            });
        }
        finally {
            setStateSafe(() => {
                setLoading(false);
            });
        }
    }), [fn, params, setStateSafe]);
    const runFnRef = (0, react_1.useRef)(runFn);
    (0, react_1.useEffect)(() => {
        runFnRef.current = runFn;
    }, [runFn]);
    (0, react_1.useEffect)(() => {
        if (runAtStart) {
            runFnRef.current();
        }
    }, [runAtStart]);
    return {
        loading,
        value,
        error,
        callAgain: (0, react_1.useCallback)((...params) => {
            runFnRef.current(...params);
        }, []),
    };
};
exports.useAsync = useAsync;
//# sourceMappingURL=useAsync.js.map